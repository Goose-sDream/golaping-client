name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      EC2_HOST: ${{ secrets.EC2_HOST }}
      EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
      EC2_KEY: ${{ secrets.EC2_KEY }}
      DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/golaping-app
      API_URL: ${{ secrets.API_URL }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Prepare .env
        run: |
          echo "API_URL=${{ secrets.API_URL }}" > .env
          echo "📄 .env file contents:"
          cat .env

      - name: Build Project
        run: pnpm build

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/golaping-app:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/golaping-app:latest

      - name: Copy .env to EC2
        run: |
          echo "${{ secrets.EC2_KEY }}" > ec2.pem
          chmod 600 ec2.pem
          scp -i ec2.pem -o StrictHostKeyChecking=no .env ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USERNAME }}/.env

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ env.EC2_KEY }}
          script: |
            echo "Deploying with image: ${DOCKER_IMAGE}:latest"
            docker stop golaping-app || true
            docker rm golaping-app || true
            docker pull ${{ secrets.DOCKER_USERNAME }}/golaping-app:latest

            # 컨테이너 실행
            docker run -d --name golaping-app -p 80:80 -p 443:443 \
            -v /etc/letsencrypt:/etc/letsencrypt \
            -e API_URL=${{ secrets.API_URL }} \
            ${{ secrets.DOCKER_USERNAME }}/golaping-app:latest

            # ✅ 복사 전 컨테이너 내부 디렉토리 생성
            docker exec golaping-app mkdir -p /usr/src/app

            # Copy .env file to Docker container
            ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "docker cp /home/${{ secrets.EC2_USERNAME }}/.env golaping-app:/usr/src/app/.env"

            # 컨테이너 내부에 /etc/letsencrypt/ 디렉터리 생성
            sudo docker exec -it golaping-app mkdir -p /etc/letsencrypt/live/golaping.site
            sudo docker exec -it golaping-app mkdir -p /etc/letsencrypt/archive/golaping.site

            # 원본 인증서 파일을 컨테이너 내부로 직접 복사
            sudo docker cp /etc/letsencrypt/archive/golaping.site/cert1.pem golaping-app:/etc/letsencrypt/live/golaping.site/cert.pem
            sudo docker cp /etc/letsencrypt/archive/golaping.site/chain1.pem golaping-app:/etc/letsencrypt/live/golaping.site/chain.pem
            sudo docker cp /etc/letsencrypt/archive/golaping.site/fullchain1.pem golaping-app:/etc/letsencrypt/live/golaping.site/fullchain.pem
            sudo docker cp /etc/letsencrypt/archive/golaping.site/privkey1.pem golaping-app:/etc/letsencrypt/live/golaping.site/privkey.pem

            # Nginx 설정 파일을 컨테이너 내부로 복사
            sudo docker cp /etc/nginx/nginx.conf golaping-app:/etc/nginx/nginx.conf
            sudo docker cp /etc/nginx/conf.d golaping-app:/etc/nginx/

            # Nginx 설정 확인 후 재시작
            sudo docker exec -it golaping-app nginx -t
            sudo docker restart golaping-app

            docker container prune -f
            docker image prune -af
            docker ps -a
            docker logs golaping-app
            sudo lsof -i :80
